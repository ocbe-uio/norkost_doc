[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Norkost",
    "section": "",
    "text": "Github\n  \n\n  \n  \nWelcome. This is the development documentation website for Norkost Project."
  },
  {
    "objectID": "norkost/1_problem.html",
    "href": "norkost/1_problem.html",
    "title": "Problem",
    "section": "",
    "text": "The pseudomised data is available in the public_data folder as an example. These are NOT the original values from KBS database.\nThree datasets are relevant:"
  },
  {
    "objectID": "norkost/1_problem.html#data",
    "href": "norkost/1_problem.html#data",
    "title": "Problem",
    "section": "",
    "text": "The pseudomised data is available in the public_data folder as an example. These are NOT the original values from KBS database.\nThree datasets are relevant:"
  },
  {
    "objectID": "norkost/index.html",
    "href": "norkost/index.html",
    "title": "Norkost",
    "section": "",
    "text": "Norkost project notes\n\n\n\n\n\n\n\n\n\nTitle\n\n\n\n\n\n\nUse Posit Cloud\n\n\n\n\nRun SPADE on Posit Cloud\n\n\n\n\nData Import Export\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "norkost/1_cloud.html",
    "href": "norkost/1_cloud.html",
    "title": "Use Posit Cloud",
    "section": "",
    "text": "Go to Posit Cloud,\n\nIf you already haven an account, click Log In. It will prompt you to log in either via email, or through other third party accounts like GitHub or Google Cloud.\nOnce you’ve logged in, you should see a panel like below.\n\nIf you click on spade project, you should be able to see a page like this:"
  },
  {
    "objectID": "norkost/2_spade.html",
    "href": "norkost/2_spade.html",
    "title": "Run SPADE on Posit Cloud",
    "section": "",
    "text": "The SPADE.RIVM package is already downloaded and installed in the workspace. You need to load the package by using the following command every time you open a new Rstudio session.\nIf there are problems using the package, please contact the Research Software Engineer at Biostatistics Department.\n\nlibrary(SPADE.RIVM)\n\n\nLoad the data\nThe data should be in the format expected by SPADE. The example below works; but if you have a new data set, you’ll need to process it a bit so that it has the necessary columns. (Might be easier to do it inside Excel!)\nThe column name Nr has been changed into id.\n\n# load the library to read in the data\nlibrary(readr)\n\nd &lt;- read_csv(\"data/norkost4_spade.csv\")\n\nNew names:\nRows: 3928 Columns: 19\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(1): sexc dbl (18): ...1, Nr, round, fish_total, fish_fatty, fruit_veg,\nwhole_grain, m...\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...1`\n\nhead(d)\n\n# A tibble: 6 × 19\n   ...1    Nr round fish_total fish_fatty fruit_veg whole_grain milk_dairy\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;\n1     1  1001     1       0          0         181.        20.8          0\n2     2  1003     1       0          0         386.        23.1          0\n3     3  1004     1       6.32       6.32      208.        47.9          0\n4     4  1005     1       0          0         373.        81.5        570\n5     5  1006     1       0          0         253.       130.           0\n6     6  1008     1       0          0         298.        31          125\n# ℹ 11 more variables: nuts_nosalt &lt;dbl&gt;, nuts_all &lt;dbl&gt;, red_meat &lt;dbl&gt;,\n#   processed_meat &lt;dbl&gt;, sex &lt;dbl&gt;, age &lt;dbl&gt;, fish_2409 &lt;dbl&gt;,\n#   dairy_portion &lt;dbl&gt;, procmeat_240925 &lt;dbl&gt;, dairy_240925 &lt;dbl&gt;, sexc &lt;chr&gt;\n\n# change the second column from Nr to id\ncolnames(d)[2] &lt;- 'id'\ncolnames(d)\n\n [1] \"...1\"            \"id\"              \"round\"           \"fish_total\"     \n [5] \"fish_fatty\"      \"fruit_veg\"       \"whole_grain\"     \"milk_dairy\"     \n [9] \"nuts_nosalt\"     \"nuts_all\"        \"red_meat\"        \"processed_meat\" \n[13] \"sex\"             \"age\"             \"fish_2409\"       \"dairy_portion\"  \n[17] \"procmeat_240925\" \"dairy_240925\"    \"sexc\"           \n\n\nWhen it comes to sex, SPADE expects 1 = male, 2 = female. Double check how it is coded in your data:\n\nd[1:6, c('sex', 'sexc')]\n\n# A tibble: 6 × 2\n    sex sexc  \n  &lt;dbl&gt; &lt;chr&gt; \n1     2 female\n2     2 female\n3     2 female\n4     1 male  \n5     1 male  \n6     1 male  \n\n\n\n\n(Optional) Define threshold\nThis is only necessary if the percentage above (or below) a threshold needs to be computed.\nSPADE expects one threshold value per age, so you’ll need to create a data like the one below. In case multiple foods are required, stack them by columns.\nIn the following example, the thresholds for whole_grain and fish are the same for all ages. They can be different. It could be a good idea to create the data in Excel and then load the data directly into R.\n\n# range: ear (below this value)\nref_ear &lt;- data.frame(\n  age = seq(18, 80, by = 1),\n  # different foods\n  whole_grain = 90, \n  fish = 20 \n)\n\n# print the first rows \nhead(ref_ear)\n\n  age whole_grain fish\n1  18          90   20\n2  19          90   20\n3  20          90   20\n4  21          90   20\n5  22          90   20\n6  23          90   20\n\n\nYou can check how many rows from the data has whole_grain below 90, and also compute the percentage.\n\nsum(d$whole_grain &lt; 90) # 3140 rows\n\n[1] 3140\n\nsum(d$whole_grain &lt; 90)/nrow(d) # 80% below 90g\n\n[1] 0.799389\n\n\n\n\nRun SPADE (two parts)\nThe following code runs for two parts model and female. See below for how to do it for male and both. Note that when specifying frml.ia and frml.if, please follow the SPADE manual.\n\n# spade (two parts) ----\n# two parts model needs to specify frml.ia and frml.if\n\nf.spade(\n1  frml.ia = whole_grain ~ fp(age),\n2  frml.if = whole_grain ~ cs(age),\n3  prb = c(25, 50, 75, 95, 97.5)/100,\n4  data = d,\n5  min.age = 18,\n  max.age = 80,\n6  sex.label = \"female\",\n7  seed = 29062020,\n8  EAR.names = 'ref_ear',\n  # UL.names = 'ref_ul',\n9  spade.output.path = \"output_food\"\n)\n\n# find the results in folder output_food\n\n\n1\n\nfrml.ia: needs to be the outcome (whole_grain in this example), as a function of age.\n\n2\n\nfrml.if: same as above\n\n3\n\nprb: percentage of habitual intake. Here is how to set them to be 25%, 50%, 75%, 95% and 97.5%.\n\n4\n\ndata: the data d you’ve loaded before\n\n5\n\nmin.age, max.age: from 18 to 80. This needs to match the EAR thresholds.\n\n6\n\nsex.label: either female, male or both. SPADE expects sex to be coded as 1 or 2 in the data, while here it is using female rather than code 2.\n\n7\n\nseed: controls the reproducibility. You do not need to change this.\n\n8\n\nEAR.names: the threshold data you’ve set up in the previous step. Can ignore if you do not need to compute the percentage above or below the threshold.\n\n9\n\nspade.output.path: where to save the data. See the example in the next section.\n\n\n\n\nIf you need other sex combinations, change sex.label while keeping everything else the same.\n\n# test if it differs for male\nf.spade(\n  frml.ia = whole_grain ~ fp(age),\n  frml.if = whole_grain ~ cs(age), \n  prb = c(25, 50, 75, 95, 97.5)/100,\n  data = d,\n  min.age = 18,\n  max.age = 80,\n  sex.label = \"male\", \n  seed = 29062020,\n  EAR.names = 'ref_ear',\n  # UL.names = 'ref_ul',\n  spade.output.path = \"output_food\"\n)\n\n# both gender\nf.spade(\n  frml.ia = whole_grain ~ fp(age), \n  frml.if = whole_grain ~ cs(age), \n  prb = c(25, 50, 75, 95, 97.5)/100,\n  data = d,\n  min.age = 18,\n  max.age = 80,\n  sex.label = \"both\", \n  seed = 29062020,\n  EAR.names = 'ref_ear',\n  # UL.names = 'ref_ul',\n  spade.output.path = \"output_food\"\n)\n\n\n\nRun SPADE (one part)\nSometimes one-part model is more desirable, if intake frequency is not modeled.\nThe set-up is very similar to two-parts model, however there is a difference in frml.if.\n\nf.spade(\n  frml.ia = Fullk ~ fp(age), # model for intake amounts,\n  frml.if = \"no.if\", # \"no.if\" = no zeroes, no intake frequencies\n  prb = c(25, 50, 75, 95, 97.5)/100,\n  data = d_nosup,\n  min.age = 18,\n  max.age = 80,\n  sex.label = \"female\", \n  seed = 29062020,\n  # EAR.names = 'ref_ear',\n  # UL.names = 'ref_ul',\n  spade.output.path = \"output_nutrient_nosup\"\n)\n\n\n\nResults folder\nOnce you’ve run the code above, the results are saved in the folder you’ve specified. Here it is output_food. We want to check the excel_tables.\n\n\nInside this folder you’ll see the results for the sex combinations you’ve done. Pay extra attention to the time when the files are created, as SPADE does not change the name of the file, so you might want to double check if you’re using the most recent results."
  },
  {
    "objectID": "norkost/3_data_import_export.html",
    "href": "norkost/3_data_import_export.html",
    "title": "Data Import Export",
    "section": "",
    "text": "To import data, locate the Upload button.\n\nSelect the Target directory. This is going to be where your uploaded data will be. I suggest to upload them into a folder called data, but you can name it whatever you need."
  },
  {
    "objectID": "norkost/3_data_import_export.html#data-export",
    "href": "norkost/3_data_import_export.html#data-export",
    "title": "Data Import Export",
    "section": "Data export",
    "text": "Data export\nOnce the analysis is finished, you can download the data from your result folder. First go to where the results are saved.\nSelect the data you want to save, then click the button on the top.\n\nThis opens a list of options. Select Export:\n\nNow you can modify the name for the file, so that it downloads the file you need on your local computer."
  },
  {
    "objectID": "norkost/3_data_import_export.html#data-import",
    "href": "norkost/3_data_import_export.html#data-import",
    "title": "Data Import Export",
    "section": "",
    "text": "To import data, locate the Upload button.\n\nSelect the Target directory. This is going to be where your uploaded data will be. I suggest to upload them into a folder called data, but you can name it whatever you need."
  }
]